'CR1000 Series Datalogger
'To create a different opening program template, type in new
'instructions and select Template | Save as Default Template
'date:
'program author: Campbell Scientific, John Saraceno

'Declare Constants
'Example:
'CONST PI = 3.141592654 or Const PI = 4*ATN(1)

'Declare Public Variables
'Example:

Public PTemp, batt_volt

Public NO3_CV_LOW,NO3_CV_HIGH,NO3_LOW_HARD,
Public NO3_LOW_SOFT,NO3_HIGH_SOFT,NO3_HIGH_HARD,NO3_FIT_HIGH
Public NO3_flag As Boolean,NO3_softFlag As Boolean, BadNO3Cnt
Const SUNA_SampleMode = "POLLED"
Const SUNA_NumWipes = 1
Const suna_delay = 500
Public SUNA_deep(17)
Alias SUNA_deep(1) =  NO3_ave_deep
Alias SUNA_deep(2) = NO3_stdev_deep
Alias SUNA_deep(3) = NO3_med_deep
Alias SUNA_deep(4) = NO3_fit_ave_deep
Alias SUNA_deep(5) = NO3_fit_stdev_deep
Alias SUNA_deep(6) = NO3_fit_med_deep
Alias SUNA_deep(7) = no3_a254_deep
Alias SUNA_deep(8) = no3_a350_deep
Alias SUNA_deep(9) = NO3_dark_deep
Alias SUNA_deep(10) = NO3_light_deep
Alias SUNA_deep(11) = Spec_Temp_deep
Alias SUNA_deep(12) = Lamp_temp_deep
Alias SUNA_deep(13) = Lamp_Time_deep
Alias SUNA_deep(14) = RH_deep
Alias SUNA_deep(16) = LampVDC_deep
Alias SUNA_deep(15) = InputVDC_deep
Alias SUNA_deep(17) = NO3_SN_deep
Public log_deep,log_shallow

Public SUNA_Quality_deep
Public SUNA_Quality_mw
Public SUNA_Quality_shallow
Public SUNA_Quality
Const Port3_SampleMode = "POLLED"
Const Port3_Mode = "suna_ver2"
Dim wipe_delay As String * 10
Dim wipe_delay_value
Const SUNA_ComPort =  33
Const Port3_delay = 500
Const Port3_start_delay = 100
Const SUNA_MEASNUM = 10
Const SUNA_AVGNUM = 5
Const SUNA_OFFSET = 0
Const SUNAMaxFrameLen = 282

Const suna_pwr_port = 9
DataTable(Deep,log_deep,-1)

  Sample(17,SUNA_deep,IEEE4)
  Sample(1,SUNA_Quality_deep,IEEE4)

EndTable

'Declare Other Variables
'Example:
'Dim Counter

'Define Data Tables.
DataTable (Test,1,-1) 'Set table size to # of records, or -1 to autoallocate.
  DataInterval (0,15,Sec,10)
  Minimum (1,batt_volt,FP2,False,False)
  Sample (1,PTemp,FP2)
EndTable

'Define Subroutines
'Sub
'EnterSub instructions here
'EndSub

Sub SUNA(dest(17),Quality As Long, comport,suna_verersion As Long,DiagFileName As String * 64)
  Dim SUNAInString As String * 2000
  Dim nbytesreturned As Long
  Dim SunaInVals(SUNAMaxFrameLen)
  Dim suna_verector(SUNA_MEASNUM,SUNAMaxFrameLen)
  Dim NO3_SampleTime(SUNA_MEASNUM)
  Dim NO3_dark(SUNA_MEASNUM)
  Dim NO3_SN,
  Public  NO3(SUNA_MEASNUM),
  Dim no3_a254(SUNA_MEASNUM)
  Dim no3_a350(SUNA_MEASNUM), NO3_light(SUNA_MEASNUM),Spec_Temp(SUNA_MEASNUM)
  Dim Lamp_temp(SUNA_MEASNUM), Lamp_Time(SUNA_MEASNUM), RH(SUNA_MEASNUM)
  Dim InputVDC(SUNA_MEASNUM), LampVDC(SUNA_MEASNUM), NO3_fit(SUNA_MEASNUM)
  Dim NO3_ave, NO3_fit_ave, NO3_stdev, NO3_fit_stdev, NO3_med, NO3_fit_med, NO3_CV
  Dim NO3_mean2med
  Dim NO3_sort(SUNA_AVGNUM),NO3_fit_sort(SUNA_AVGNUM)
  Dim t,j,z
  Dim FileHandle As Long
  Dim StartCmd As String * 12
  Dim StopCmd As String * 4
  Dim CmdChar As String * 3
  Dim FrameLen As Long
  Select Case suna_verersion
  Case 1
    If SUNA_MEASNUM < 100 AND SUNA_MEASNUM  > 9
      StartCmd = "M0" & SUNA_MEASNUM
    ElseIf     SUNA_MEASNUM < 10
      StartCmd = "M00" & SUNA_MEASNUM
    ElseIf     SUNA_MEASNUM < 1000 AND SUNA_MEASNUM>99
      StartCmd = "M" & SUNA_MEASNUM
    EndIf
    'StartCmd = "STRT"
    FrameLen = 241

  Case 2
    StartCmd = "MEASURE " & SUNA_MEASNUM
    StartCmd = "START"
    FrameLen = 282
  EndSelect

  StopCmd = "STOP"
  CmdChar = "$"
  'wipe the suna
  Dim i
  'TODO: Fix the multiple wipe for integrated suna v2 (ONLY WIPES ONCE)

  'issue EXIT and then STOP to make sure we are in a known state
  'i.e., out of SUNA> and ideally back at CMD?
  'then delay and flush out anything in the buffer
  If UpperCase(SUNA_SampleMode) = "POLLED"
    '    SerialOut (comport, CHR(13) + CHR(10),"CMD?",3,500)
    '    SerialOut(comport,"EXIT" & CHR(13) & CHR(10),"",1,1)
    '    SerialOut(comport,StopCmd & CHR(13) & CHR(10),"",1,1)
    '    Delay (1,1,Sec)
    '    SerialFlush (comport)
    ''    If suna_verersion = 2
    ''      '    'hit the serial port with $'s until we   get to the command mode SUNA> prompt
    ''      '    'then initiate the wipe command, special swipewiper, SUNA_NumWipes times if more than default value (default 1)
    ''      SerialOut (comport,"$" & CHR(13) + CHR(10),"SUNA>",0,0)
    ''
    ''    EndIf
    '    'then ask for "X" num measurements
    SerialOut (comport, CHR(13) + CHR(10),"CMD?",3,500)

    SerialOut(comport,StartCmd & CHR(13) & CHR(10),"",1,1)
  EndIf
  'intialize data vectors as NAN's to start
  SunaInVals() = NAN
  suna_verector() = NAN
  '... and all the others
  'wait for all the data to come in
  z = 1
  For t = 1 To (300 + (SUNA_MEASNUM * 3))
    'every delay milliseconds, look for a string
    'that starts with "SA" and ends with CRLF
    Delay (1,SUNA_delay,mSec)
    SerialInRecord (comport,SUNAInString,&h5341,0,&H0D0A,nbytesreturned,11)

    'if we found something of interest, tack the "SA"
    'back on to the front and process
    If nbytesreturned <> 0 Then
      SUNAInString = "SA" & SUNAInString
      'if a file name has been provided, write the "SA"..<CR>
      'data captured to a text file
      'this is less efficient than parsing out the numbers and saving them to a datatable
      'but is more efficient than saving the string input to a datatable
      If DiagFileName <> "" Then
        FileHandle = FileOpen (DiagFileName,"a+b",-1)
        FileWrite (FileHandle,Replace (Public.Timestamp(4,1)," ",",") & "," & SUNAInString & CHR(13) & CHR(10),0)
        FileClose (FileHandle)
      EndIf
      'take action on light or dark frames (LF/DF)
      Select Case Left(SUNAInString,6)
      Case "SATSLF"
        'light data, parse it
        SplitStr (SunaInVals,SUNAInString,",",FrameLen,0)
        If suna_verersion = 1 Then
          dest(17)= SunaInVals(1)'this is the serial number
          'dest() = SunaInVals(2)
          NO3(z) = SunaInVals(4)
          NO3_fit(z) = SunaInVals(5)
          dest(12) = SunaInVals(6)
          dest(11)= SunaInVals(7)
          Dest(13) = SunaInVals(8)
          dest(14)= SunaInVals(9)
          dest(10) = SunaInVals(13)
          dest(9) = SunaInVals(14)
          dest(16) = SunaInVals(10)
          dest(15) = SunaInVals(12)
          dest(7)  = SunaInVals(90)'RAW A/D detector counts for 254 nm
          dest(8)  = SunaInVals(209)'RAW A/D detector counts for 350 nm

        ElseIf suna_verersion = 2 Then

          NO3_fit(z) = SunaInVals(281)
          NO3(z) = SunaInVals(5) 'mg/L No3-N
          dest(7)  = SunaInVals(6)   'absorbance at 254 nm
          dest(8)  = SunaInVals(7) 'absorbance at 350 nm
          dest(9)  = SunaInVals(10)
          dest(10) = SunaInVals(9)
          dest(11) = SunaInVals(269)
          dest(12) = SunaInVals(270)
          dest(13) = SunaInVals(271)
          dest(14)= SunaInVals(272)
          dest(15) = SunaInVals(273)
          dest(16) = SunaInVals(274)
          dest(17) = SunaInVals(1)'this is the no3 sensors serial number
        EndIf
        'move the split data array into the vector
        Move (suna_verector(z,1),FrameLen,SunaInVals(1),FrameLen)

        'increment pointer to next message
        z = z+1
        If z > SUNA_MEASNUM Then ExitFor

      Case "SATSDF"
        'do nothing with the dark data
      EndSelect

    EndIf
  Next t
  SerialOut (comport,StopCmd + CHR(13) + CHR(10),"",1,100)'stop sensor

  'Alternatively, I guess we conditionally call the processing (AvgSpa, etc.) based on the variable "z".
  If z < SUNA_MEASNUM Then
    'set quality flag to register all data is bad
    Quality=255
    ' dest() = NAN 'set output date to NANS
  EndIf
  'Else
  'do processing and output

  'Calculate stats
  AvgSpa (NO3_ave,SUNA_AVGNUM,NO3(SUNA_MEASNUM-SUNA_AVGNUM))
  AvgSpa (NO3_fit_ave,SUNA_AVGNUM,NO3_fit(SUNA_MEASNUM-SUNA_AVGNUM))
  StdDevSpa (NO3_stdev,SUNA_AVGNUM,NO3(SUNA_MEASNUM-SUNA_AVGNUM))
  StdDevSpa (NO3_fit_stdev,SUNA_AVGNUM,NO3_fit(SUNA_MEASNUM-SUNA_AVGNUM))
  SortSpa(NO3_sort(),SUNA_AVGNUM,NO3(SUNA_MEASNUM-SUNA_AVGNUM))
  SortSpa(NO3_fit_sort(),SUNA_AVGNUM,NO3_fit(SUNA_MEASNUM-SUNA_AVGNUM))

  'get median - average middle 2 numbers if swath is even, use middle number if swath is odd
  If SUNA_AVGNUM MOD 2 = 0 Then
    'avgnum is even
    'average the middle two numbers of the swath
    NO3_med = (NO3_sort(SUNA_AVGNUM/2) + NO3_sort((SUNA_AVGNUM/2)+1)) / 2
    NO3_fit_med = (NO3_sort(SUNA_AVGNUM/2) + NO3_sort((SUNA_AVGNUM/2)+1)) / 2
  Else
    'avgnum is odd
    'just take the middle number
    NO3_med = NO3_sort(Ceiling(SUNA_AVGNUM/2))
    NO3_fit_med = NO3_sort(Ceiling(SUNA_AVGNUM/2))
  EndIf
  NO3_CV=NO3_stdev/NO3_ave*100
  NO3_mean2med=NO3_ave/NO3_med

  'Calculate a measurement quality number
  'Each bit in the number has a different meaning
  'See the following chart:
  'bit, integer, flag
  '00, 01, <low_soft
  '01, 02, >high_soft
  '02, 04, <low_hard
  '03, 08, >high_hard
  '04, 16, <cv_low
  '05, 32, >cv_high
  '06, 64, med = 0
  Quality = 0
  If (NO3_ave - SUNA_OFFSET)<NO3_LOW_SOFT Then Quality += 1
  If (NO3_ave - SUNA_OFFSET)>NO3_HIGH_SOFT Then Quality += 2
  If (NO3_ave - SUNA_OFFSET)<NO3_LOW_HARD Then Quality += 4
  If (NO3_ave - SUNA_OFFSET)>NO3_HIGH_HARD Then Quality +=8
  If NO3_CV<NO3_CV_LOW Then Quality += 16
  If NO3_CV>NO3_CV_HIGH Then Quality += 32
  If NO3_fit_med>NO3_FIT_HIGH Then Quality += 64
  If NO3_med=0 Then Quality += 128

  dest(1) = NO3_ave
  dest(2) = NO3_stdev
  dest(3) = NO3_med
  dest(4) = NO3_fit_ave
  dest(5) = NO3_fit_stdev
  dest(6) = NO3_fit_med

  'EndIf
EndSub

'Main Program

BeginProg

  Const suna_ver = 2  'suna_ver = 1 'can be 1 or 2
  SerialOpen (SUNA_ComPort,38400,0,0,20000)
  Scan (1,Sec,0,0)
    PanelTemp (PTemp,250)
    Battery (batt_volt)
    Call SUNA(SUNA_deep,SUNA_Quality_deep,SUNA_ComPort,suna_ver,"CRD:SUNA_DEEP_" & Left(Public.Timestamp(4,1),10) & ".csv")
    'Enter other measurement instructions
    'Call Output Tables
    'Example:
    CallTable Deep
    CallTable Test
  NextScan

EndProg

